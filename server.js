// импорт модулей
const express = require('express');
const {fetcher} = require('./fetcher');

const app = express(); // создание сервера

app.use(express.json()); // для парсинга json

app.post('/parse', async (req, res) => {
  const {domainName} = req.body; // получение домена из запроса
  const visited = new Set(); // массив посещенных страниц
  const needToVisit = [domainName]; // массив страниц, которые нужно посетить
  let tryCount = 0; // счетчик попыток


  // пока есть страницы, которые нужно посетить и не превышен лимит попыток
  while (needToVisit.length > 0 && tryCount < 1) {
    const url = needToVisit.pop(); // получаем url из массива
    try {
      const response = await fetcher(url); // получаем ответ от сервера
      const text = await response.text(); // получаем текст ответа
      if(response.status === 200) {
        // если ответ 200, то добавляем страницу в посещенные
        visited.add(url);
        // ищем все ссылки на странице
        const links = text.match(/href="([^"]*)"/g);
        if(links) { // если ссылки есть
          links.forEach(link => {  // перебираем ссылки
            let newUrl = link.match(/href="([^"]*)"/)[1]; // получаем url из ссылки
            if(!newUrl.startsWith('http')) { // если url не начинается с http, то добавляем домен
              newUrl = domainName + newUrl;
            }
            if(!visited.has(newUrl) && !needToVisit.includes(newUrl)) { // если страница не посещалась и не находится в массиве страниц, которые нужно посетить, то добавляем ее в массив страниц, которые нужно посетить
              needToVisit.push(newUrl);
            }
          });

        }
      }
    } catch (e) {
      // если ответ 404, то добавляем страницу в посещенные
      visited.add(url);
      if(tryCount < 1) {
        // если попыток меньше 1, то добавляем страницу в массив страниц, которые нужно посетить
        needToVisit.push(url);
        tryCount++;
      }
    }
  }
  // отправляем ответ
  res.send(Array.from(visited));
});

app.listen(3000, () => {
  console.log('Server has been started');
});

module.exports = app;

/*
 //
 // Этот код представляет собой сервер Node.js, который использует фреймворк Express для обработки HTTP-запросов. Когда POST-запрос выполняется к конечной точке `/parse`, сервер извлекает `domainName` из тела запроса и использует его для начала просмотра веб-страниц.
 //
 //   Сервер ведет два массива: `visitedPages`, в котором хранятся все посещенные страницы, и `pagesToVisit`, в котором хранятся все страницы, которые необходимо посетить. Сервер также отслеживает количество попыток посетить страницу.
 //
 //   Сервер будет продолжать посещать страницы до тех пор, пока остаются страницы для посещения и количество попыток меньше 1. Для каждой страницы сервер использует функцию `fetcher`, чтобы сделать запрос к странице и получить ее содержимое. Если статус ответа равен 200, то есть страница была успешно получена, сервер добавит страницу в массив `visitedPages` и извлечет все ссылки со страницы с помощью регулярного выражения.
 //
 //   Для каждой ссылки на странице сервер проверит, начинается ли она с `http`. Если нет, он добавит доменное имя в начало ссылки. Затем сервер проверит, не находится ли ссылка в массивах `visitedPages` или `pagesToVisit`. Если ее нет ни в одном из массивов, она будет добавлена в массив `pagesToVisit`.
 //
 //   Если при получении страницы произошла ошибка, например, ошибка 404, сервер добавит страницу в массив `visitedPages`. Если количество попыток меньше 1, сервер также добавит страницу обратно в массив `pagesToVisit` и увеличит количество попыток.
 //
 //   Как только все страницы будут посещены или больше не останется страниц для посещения, сервер отправит обратно массив всех посещенных страниц в качестве ответа.

 */
